mysql> CREATE TABLE Users(
    -> id INT PRIMARY KEY AUTO_INCREMENT,
    -> email VARCHAR(255) NOT NULL UNIQUE,
    -> bio TEXT,
    -> country VARCHAR(3)
    -> );
    
    mysql> INSERT INTO Users(email, bio, country) 
    VALUES('hello@world.com', 'love food', 'US') ('elon@space.com', 'love rockets', 'MX'), ('hi@yahho.com', 'great man', 'FR');
    
    | id | email           | bio          | country |
+----+-----------------+--------------+---------+
|  1 | hello@world.com | love food    | US      |
|  2 | elon@space.com  | love rockets | MX      |
|  3 | hi@yahho.com    | great man    | FR      |
+----+-----------------+--------------+---------+
    
    mysql> CREATE INDEX email_index ON Users(email); // for faster query, it helps db to find important keywords without hving to scan the whole dataset.
    
    mysql> CREATE TABLE Rooms(
    -> id INT AUTO_INCREMENT,
    -> street VARCHAR(255),
    -> owner_id INT NOT NULL,
    -> PRIMARY KEY (id),
    -> FOREIGN KEY (owner_id) REFERENCES Users(id)
    -> );
    
 by having FOREIGN KEY constraint means don't delete Related data or it would be impossible to delete users who have associated Room at the same time.(data integrity)
    
    | id | street            | owner_id |
+----+-------------------+----------+
|  1 | san diego sailbot |        1 |
|  2 | vail cabin        |        1 |
|  3 | sf box            |        1 |
+----+-------------------+----------+

                       JOIN - 
                 query users who own rooms
mysql> SELECT * FROM Users INNER JOIN Rooms ON Rooms.owner_id = Users.id;
+----+-----------------+-----------+---------+----+-------------------+----------+
| id | email           | bio       | country | id | street            | owner_id |
+----+-----------------+-----------+---------+----+-------------------+----------+
|  1 | hello@world.com | love food | US      |  1 | san diego sailbot |        1 |
|  1 | hello@world.com | love food | US      |  2 | vail cabin        |        1 |
|  1 | hello@world.com | love food | US      |  3 | sf box            |        1 |
+----+-----------------+-----------+---------+----+-------------------+----------+

mysql> SELECT * FROM Users LEFT JOIN Rooms ON Rooms.owner_id = Users.id;
+----+-----------------+--------------+---------+------+-------------------+----------+
| id | email           | bio          | country | id   | street            | owner_id |
+----+-----------------+--------------+---------+------+-------------------+----------+
|  1 | hello@world.com | love food    | US      |    1 | san diego sailbot |        1 |
|  1 | hello@world.com | love food    | US      |    2 | vail cabin        |        1 |
|  1 | hello@world.com | love food    | US      |    3 | sf box            |        1 |
|  2 | elon@space.com  | love rockets | MX      | NULL | NULL              |     NULL |
|  3 | hi@yahho.com    | great man    | FR      | NULL | NULL              |     NULL |
+----+-----------------+--------------+---------+------+-------------------+----------+

              Reslove conflicitng Column names in Join - 
mysql> SELECT Users.id AS user_id, Rooms.id AS room_id, email, street FROM Users INNER JOIN Rooms ON Rooms.owner_id = Users.id;(one to many relations)
+---------+---------+-----------------+-------------------+
| user_id | room_id | email           | street            |
+---------+---------+-----------------+-------------------+
|       1 |       1 | hello@world.com | san diego sailbot |
|       1 |       2 | hello@world.com | vail cabin        |
|       1 |       3 | hello@world.com | sf box            |
+---------+---------+-----------------+-------------------+

how user book a room through Bookings table -
mysql> CREATE TABLE Bookings(
    -> id INT AUTO_INCREMENT,
    -> guest_id INT NOT NULL,
    -> room_id INT NOT NULL,
    -> check_in DATETIME,
    -> PRIMARY KEY (id),
    -> FOREIGN KEY(guest_id) REFERENCES Users(id),
    -> FOREIGN KEY(room_id) REFERENCES Rooms(id)
    -> );
    
it allows us to create complex relationships where a user has booked many rooms or a room has been booked by users
once we have data model established we can run joins through bookings table- 
mysql> INSERT INTO Bookings(guest_id, room_id, check_in) VALUES (1, 2, now());
Query OK, 1 row affected (0.19 sec)

mysql> select * from Bookings;
+----+----------+---------+---------------------+
| id | guest_id | room_id | check_in            |
+----+----------+---------+---------------------+
|  1 |        1 |       2 | 2021-07-15 11:17:25 |
+----+----------+---------+---------------------+

so we can get all the Rooms a user has booked by joining Bookings to Rooms and filtering bu guest-id -
mysql> SELECT guest_id, street, check_in FROM Bookings INNER JOIN Rooms ON Rooms.owner_id = guest_id WHERE guest_id = 1;
+----------+-------------------+---------------------+
| guest_id | street            | check_in            |
+----------+-------------------+---------------------+     join rooms for user 1
|        1 | san diego sailbot | 2021-07-15 11:17:25 |
|        1 | vail cabin        | 2021-07-15 11:17:25 |
|        1 | sf box            | 2021-07-15 11:17:25 |
+----------+-------------------+---------------------+

get Guests who stayed in a room - 
mysql> SELECT room_id, guest_id, email, bio FROM Bookings INNER JOIN Users ON Users.id = guest_id WHERE room_id = 2;
+---------+----------+-----------------+-----------+
| room_id | guest_id | email           | bio       |
+---------+----------+-----------------+-----------+   join users for room 2
|       2 |        1 | hello@world.com | love food |
+---------+----------+-----------------+-----------+









    
    
